stages:
  - init
  - build
  - test
  - plan
  - deploy
  - cleanup

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_PROTECTED == "true"

include:
  - project: infrastructure/devops/aop-addons-ci
    file:
      - /templates/AOP-Addons/Default.yml
    ref: main
    rules:
      - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH !~ /^\d+\.\d+$/ && $CI_COMMIT_TAG == null'

.global-env:
  image: axelor/app-builder:7.4

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

# Add wrapper and caches folders in the cache
.global_cache: &global_cache
  paths:
    - .gradle
    - build
  policy: pull-push

.global_cache_pull: &global_cache_pull
  <<: *global_cache
  policy: pull

# Build artifacts
build:
  extends: .global-env
  stage: build
  cache:
    - *global_cache
  allow_failure: false
  script:
    - ./gradlew clean assemble
  interruptible: true
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && ($CI_COMMIT_BRANCH =~ /^\d+\.\d+$/ || $CI_COMMIT_TAG)'

# Check code formatting
spotless:
  extends: .global-env
  stage: test
  cache:
    - *global_cache_pull
  allow_failure: true
  script:
    - ./gradlew spotlessCheck
  interruptible: true
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

.publish_template: &publish_configuration
  extends: .global-env
  stage: plan
  cache:
    - *global_cache_pull
  script:
    - ./gradlew clean assemble publish -PaddonsMavenUsername=${NEXUS_ADDONS_DEPLOYMENT_USER} -PaddonsMavenPassword=${NEXUS_ADDONS_DEPLOYMENT_PASSWORD} -P${PUBLISH_TYPE}

publish snapshot:
  <<: *publish_configuration
  variables:
    PUBLISH_TYPE: "snapshotRelease"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

publish release:
  <<: *publish_configuration
  variables:
    PUBLISH_TYPE: "finalRelease"
  rules:
    - if: '$CI_COMMIT_TAG'

create release:
  stage: plan
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  cache:
    - *global_cache_pull
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "create release for $CI_COMMIT_TAG"
    - |
      RELEASE_DESCRIPTION=$(sed -n "/^## ${CI_COMMIT_TAG}/,/^## /p" CHANGELOG.md | sed '$d;$d')
      release-cli create --name "$CI_COMMIT_TAG" --description "$RELEASE_DESCRIPTION" --tag-name "$CI_COMMIT_TAG" --ref "$CI_COMMIT_TAG"
